ISMM 2020 Notes
===============

Trying something new.  As ISMM 2020 is a virtual conference this year, I'm listening in to all the talks and making notes as I go.  `YouTube Live Stream <https://www.youtube.com/watch?v=skNDP5ZYZJ4&feature=youtu.be>`_.  `Proceedings <https://conf.researchr.org/program/ismm-2020/program-ismm-2020?past=Show%20upcoming%20events%20only>`_.

Verified Sequential Malloc/Free
-------------------------------

Seperation logic based proofs, described in DSL for a proof tool I am unfamiliar with.  Basic strategy is to do source level proof w/proof annotations stored separately and rely on CompCert (a verifier C compiler) to produce a verified binary.  Library verified is a malloc library I'm unfamiliar with, unclear how "real" this code is.  Verification work done manually by the author.  The first couple of slides do nicely describe the strength of seperation logic for the domain and some of the key intuitions.

Alligator Collector: A Latency-Optimized Garbage Collector for Functional Programming Languages
-----------------------------------------------------------------------------------------------

Partially concurrent collector for GHC.  Presentation is somewhat weak for a audience familiar with garbage collection fundementals.  Collector sounds fairly basic by modern Java standards, but it makes for an interesting experience report.  The design used isn't a bad starting point for languages without a mature collector.

The question at the end about implications of precompiled binaries is interesting.  In particular, acknowledged advantage of load barrier and partially incremental collection.  Answer mentioned "customer was strict" about that requirement which provides some context on why the design evolved in the way it did.  

Understanding and Optimizing Persistent Memory Allocation
----------------------------------------------------------

Focus is on writing crash atomic (i.e. exception safe) allocation code for persistent memory.  Approach take is to persist only heap metadata sufficient to implement a conservative (ambigious) GC.  Previous approaches referenced appear to be analogous to standard persistent techniques for databases (i.e. commit logs).  Positioning is described most clearly in conclusion slide.  Questions at the end are the clearest part of the talk.  

The contribution of this paper appear fairly minor conceptually.  There's a passing mention of first lock free allocator, but the only part actually discussed is persisting only heap metadata and reconstructing rest on recovery.  Previous work had already used conservative GC as fallback.  The choice to use a handlized heap is understandable, but has unfortunate performance implications.  

An interesting idea to explore in this area would be what a relocating collector looks like in this space.  One way to avoid need for handlization is to support pointer fixup.  You could track previous mapped addresses and as long as those don't overlap, you can interpret all previous pointers with a load barrier.  Technically, you can do fixup without mark or relocate, but if you're paying the semantic costs to support fixup you might as well get the fragmentation benefits.  

  
  
